def runTests( phpVersion ) {
    docker.image( "wordpressdevelop/php:${phpVersion}-fpm" ).inside {
        stage( "${phpVersion} Tests" ){
            try {
                sh "vendor/bin/phpunit -d memory_limit=64M -c phpunit.xml.dist --log-junit build/logs/junit-${phpVersion}.xml"
            } finally {
                junit "build/logs/junit-${phpVersion}.xml"
            }
        }
    }
}

node( 'docker-agent' ) {
    def scmVars = checkout scm
    docker.image( 'yoastseo/docker-php-composer-node:latest' ).inside {
        stage( 'Install' ) {
            sh 'composer install --no-interaction'
            sh 'mkdir -p build/logs'
        }
    }
    parallel(
        other: {
            docker.image( 'wordpressdevelop/php:7.4-fpm' ).inside {
                parallel(
                    phplint: {
                        stage( 'Linting' ) {
                            sh 'find -L . -path ./vendor -prune -o -path ./node_modules -prune -o -name "*.php" -print0 | xargs -0 -n 1 -P 4 php -l'
                        }
                    },
                    phpcs: {
                        stage( 'Codestyle' ) {
                            try {
                                sh 'vendor/bin/phpcs --report=checkstyle --report-file=`pwd`/build/logs/checkstyle.xml'
                            } finally {
                                def checkstyle = scanForIssues tool: checkStyle(pattern: 'build/logs/checkstyle.xml')
                                publishIssues issues: [checkstyle]
                            }
                        }
                    },
                    phpmd: {
                        stage( 'Mess detection' ) {
                            try {
                                sh 'vendor/bin/phpmd . xml cleancode,codesize,design,naming,unusedcode --reportfile build/logs/pmd.xml --exclude vendor/,build/ --ignore-violations-on-exit'
                            } finally {
                                def pmd = scanForIssues tool: pmdParser(pattern: 'build/logs/pmd.xml')
                                publishIssues issues: [pmd]
                            }
                        }
                    },
                    copypaste: {
                        stage('Copy paste detection') {
                            try {
                                sh 'vendor/bin/phpcpd --log-pmd build/logs/pmd-cpd.xml --exclude vendor --exclude build . || exit 0'
                            } finally {
                                def cpd = scanForIssues tool: cpd(pattern: 'build/logs/pmd-cpd.xml')
                                publishIssues issues: [cpd]
                            }
                        }
                    },
                    securitycheck: {
                        stage( 'Security check' ) {
                            sh 'vendor/bin/security-checker security:check composer.lock'
                        }
                    }
                )
            }
        },
        php73: {
            runTests( '7.3' );
        },
        php74: {
            // Run tests with code coverage
            docker.image( "wordpressdevelop/php:7.4-fpm" ).inside {
                stage( "7.4 Tests" ){
                	slackSend channel: 'name', message: 'start debug'
                    sh 'docker-php-ext-enable xdebug'
                    try {
                        sh "vendor/bin/phpunit -c phpunit.xml.dist --log-junit build/logs/junit-7.4.xml --coverage-html build/coverage --coverage-clover build/logs/clover.xml"
                    } finally {
                        junit "build/logs/junit-7.4.xml"
                        step ([
                            $class: 'CloverPublisher',
                            cloverReportDir: "build/coverage",
                            cloverReportFileName: "../logs/clover.xml",
                            healthyTarget: [ methodCoverage: 70, conditionalCoverage: 80, statementCoverage: 80 ],
                            unhealthyTarget: [ methodCoverage: 50, conditionalCoverage: 50, statementCoverage: 50 ],
                            failingTarget: [ methodCoverage: 0, conditionalCoverage: 0, statementCoverage: 0 ]
                        ])
                    }
                }
            }
        },
        php80: {
            runTests( '8.0' );
        },
        php56: {
            runTests( '5.6' );
        }
    )
    stage( 'Post build actions' ) {
    	 steps {
			script {
				if (currentBuild.result == 'SUCCESS') {
					slackSend channel: 'name', message: 'message'
				} else {
					slackSend channel: 'name', message: 'message fail'
				}
			}
		}

        sh 'git fetch --tags'
        def tag = sh( script: "git describe --exact-match --tags ${scmVars.GIT_COMMIT}", returnStdout: true ).trim()
        build job: 'wpseo/artifact', parameters: [ [ $class: 'StringParameterValue', name: 'commit', value: scmVars.GIT_COMMIT ], [ $class: 'StringParameterValue', name: 'version', value: tag ] ]
    }
}
